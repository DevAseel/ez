import React, { useState, useEffect } from "react";
import type { FormEvent, ChangeEvent } from "react";
import Head from "next/head";
import { useSession } from "next-auth/react";
import { api } from "~/utils/api";
import Sidebar from "../../components/Sidebar";
import Rewards from "../../components/Rewards";
import Leaderboard from "~/components/Leaderboard";

import Image from "next/image";

const Dashboard = () => {
  const { data: sessionData } = useSession();
  // trpc calls
  const { data: allStatus, refetch: refetchAllStatus } =
    api.status.getAll.useQuery(undefined, {
      enabled: sessionData?.user !== undefined,
    });

  const { data: allPoints, refetch: refetchAllPoints } =
    api.points.getAll.useQuery(undefined, {
      enabled: sessionData?.user !== undefined,
    });

  const { data: pointsData, refetch: refetchPoints } =
    api.points.getLatest.useQuery(undefined, {
      enabled: sessionData?.user !== undefined,
    });

  const { data: statusData, refetch: refetchStatus } =
    api.status.getLatest.useQuery(undefined, {
      enabled: sessionData?.user !== undefined,
    });

  // mutation
  const postStatus = api.status.addNew.useMutation({
    onSuccess: async () => {
      await refetchStatus(), await refetchAllStatus();
    },
  });
  const postPoints = api.points.addNew.useMutation({
    onSuccess: async () => {
      await refetchPoints(), await refetchAllPoints();
    },
  });
  // states
  const [userStatus, setUserStatus] = useState("");
  const [statusPopUp, setStatuPopUp] = useState(false);
  const [haki, setHaki] = useState(0);
  // handlers
  const handleSubmit = (e: FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    if (userStatus.length !== 0 && sessionData?.user.name) {
      postStatus.mutate({
        status: userStatus,
        userName: sessionData.user.name,
      });

      if (!pointsData?.points) {
        postPoints.mutate({
          points: 1,
          userName: sessionData.user.name,
        });
      } else {
        postPoints.mutate({
          points: pointsData?.points + 1,
          userName: sessionData.user.name,
        });
      }

      setStatuPopUp(!statusPopUp);
    }
  };

  const updateStatusPopUp = () => {
    setStatuPopUp(!statusPopUp);
  };

  const handleChange = (event: ChangeEvent<HTMLInputElement>) => {
    setUserStatus(event.currentTarget.value);
  };

  // rendering
  useEffect(() => {
    if (pointsData?.points) setHaki(Math.round(pointsData?.points * 0.1));
  }, [pointsData]);

  return (
    <>
      <Head>
        <title>EZ - Employee engagement Zone</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <section className="relative flex h-screen w-screen items-center justify-center bg-slate-900">
        <div className="flex h-5/6 w-8/12 items-center justify-center">
          {/* here */}
          <Sidebar
            pointsData={pointsData}
            handleSubmit={handleSubmit}
            statusPopUp={statusPopUp}
            updateStatusPopUp={updateStatusPopUp}
            handleChange={handleChange}
            statusData={statusData}
          />
          <div className=" m-2 flex h-full w-9/12 items-center justify-center rounded bg-slate-800 p-12">
            <div className="h-full w-1/2">
              <p className="mb-2 text-xl font-bold">Status updates</p>
              <div className="h-full w-full overflow-auto">
                {allStatus?.map((status, index) => (
                  <div key={index} className="mb-2 rounded bg-slate-700 p-2">
                    <div className="flex w-full items-center justify-around">
                      {status.image && (
                        <Image
                          src={status.image}
                          alt="user profile image"
                          width="50"
                          height="50"
                          className="rounded-full"
                        />
                      )}
                      <div className="w-full pl-2">
                        <p className="text-base text-red-500">
                          {status.userName}
                        </p>
                        <p className="pb-2 text-sm">{status.status}</p>
                        <p className="text-right text-[0.75rem] text-slate-400">
                          {status.createdAt.toLocaleString()}
                        </p>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
            <div className="flex h-full w-1/2 flex-col">
              <Leaderboard allPoints={allPoints} />
              <Rewards haki={haki} />
            </div>
          </div>
        </div>
      </section>
    </>
  );
};

export default Dashboard;
